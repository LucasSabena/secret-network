import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

async function deepDiagnosis() {
  console.log('\n' + '='.repeat(70));
  console.log('üî¨ DIAGN√ìSTICO PROFUNDO DE PERFORMANCE');
  console.log('='.repeat(70) + '\n');

  // 1. Verificar cantidad de datos
  console.log('üìä PASO 1: Verificando cantidad de datos...\n');
  
  const [
    { count: programasCount },
    { count: categoriasCount },
    { count: relacionesCount },
  ] = await Promise.all([
    supabase.from('programas').select('*', { count: 'exact', head: true }),
    supabase.from('categorias').select('*', { count: 'exact', head: true }),
    supabase.from('programas_subcategorias').select('*', { count: 'exact', head: true }),
  ]);

  console.log(`   ‚Ä¢ Programas: ${programasCount}`);
  console.log(`   ‚Ä¢ Categor√≠as: ${categoriasCount}`);
  console.log(`   ‚Ä¢ Relaciones: ${relacionesCount}\n`);

  // 2. Probar consulta espec√≠fica con timing
  console.log('üìä PASO 2: Probando consulta espec√≠fica con categoria_id...\n');
  
  const start = Date.now();
  const { data: testProgramas, error } = await supabase
    .from('programas')
    .select('id, nombre, categoria_id')
    .eq('categoria_id', 1)
    .limit(10);
  const time = Date.now() - start;

  if (error) {
    console.log(`   ‚ùå Error: ${error.message}\n`);
  } else {
    console.log(`   ‚úÖ Resultados: ${testProgramas?.length || 0} programas`);
    console.log(`   ‚è±Ô∏è  Tiempo: ${time}ms`);
    console.log(`   üìà ${time < 50 ? '‚úÖ R√ÅPIDO (√≠ndice funcionando)' : '‚ö†Ô∏è  LENTO (√≠ndice NO funcionando)'}\n`);
  }

  // 3. Probar consulta con IN (usa √≠ndices)
  console.log('üìä PASO 3: Probando consulta con IN (m√∫ltiples IDs)...\n');
  
  const ids = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  const start2 = Date.now();
  const { data: testProgramas2 } = await supabase
    .from('programas')
    .select('id, nombre')
    .in('id', ids);
  const time2 = Date.now() - start2;

  console.log(`   ‚úÖ Resultados: ${testProgramas2?.length || 0} programas`);
  console.log(`   ‚è±Ô∏è  Tiempo: ${time2}ms`);
  console.log(`   üìà ${time2 < 100 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è  LENTO'}\n`);

  // 4. Probar consulta de relaciones
  console.log('üìä PASO 4: Probando relaciones programas-subcategor√≠as...\n');
  
  const start3 = Date.now();
  const { data: relaciones } = await supabase
    .from('programas_subcategorias')
    .select('programa_id, subcategoria_id')
    .in('programa_id', ids);
  const time3 = Date.now() - start3;

  console.log(`   ‚úÖ Resultados: ${relaciones?.length || 0} relaciones`);
  console.log(`   ‚è±Ô∏è  Tiempo: ${time3}ms`);
  console.log(`   üìà ${time3 < 100 ? '‚úÖ R√ÅPIDO (√≠ndice funcionando)' : '‚ö†Ô∏è  LENTO (√≠ndice NO funcionando)'}\n`);

  // 5. An√°lisis de latencia de red
  console.log('üìä PASO 5: Probando latencia de red a Supabase...\n');
  
  const pings: number[] = [];
  for (let i = 0; i < 5; i++) {
    const pingStart = Date.now();
    await supabase.from('programas').select('id').limit(1);
    const pingTime = Date.now() - pingStart;
    pings.push(pingTime);
  }

  const avgPing = Math.round(pings.reduce((a, b) => a + b, 0) / pings.length);
  console.log(`   üåê Latencia promedio: ${avgPing}ms`);
  console.log(`   üìä Pings individuales: ${pings.join('ms, ')}ms\n`);

  if (avgPing > 200) {
    console.log('   ‚ö†Ô∏è  ALTA LATENCIA DETECTADA');
    console.log('   Esto puede ser por:');
    console.log('   ‚Ä¢ Servidor de Supabase lejos de tu ubicaci√≥n');
    console.log('   ‚Ä¢ Plan Free Tier (m√°s lento)');
    console.log('   ‚Ä¢ Conexi√≥n a internet lenta\n');
  }

  // Resumen y diagn√≥stico
  console.log('='.repeat(70));
  console.log('üéØ DIAGN√ìSTICO FINAL');
  console.log('='.repeat(70) + '\n');

  const issueCount = [time > 50, time2 > 100, time3 > 100, avgPing > 200].filter(Boolean).length;

  if (issueCount === 0) {
    console.log('‚úÖ TODO EST√Å BIEN');
    console.log('   Los √≠ndices est√°n funcionando correctamente.');
    console.log('   Si a√∫n ves lentitud en la app, el problema puede ser:');
    console.log('   ‚Ä¢ Renderizado en el cliente (React)');
    console.log('   ‚Ä¢ Muchas im√°genes cargando');
    console.log('   ‚Ä¢ JavaScript bloqueante\n');
  } else if (avgPing > 200) {
    console.log('‚ö†Ô∏è  PROBLEMA PRINCIPAL: LATENCIA DE RED');
    console.log(`   Latencia promedio: ${avgPing}ms (objetivo: <100ms)`);
    console.log('\n   Soluciones:');
    console.log('   1. Verifica tu ubicaci√≥n vs ubicaci√≥n del servidor Supabase');
    console.log('   2. Considera cambiar la regi√≥n del proyecto');
    console.log('   3. Implementa m√°s cach√© en el servidor (ISR)\n');
  } else {
    console.log('‚ö†Ô∏è  LOS √çNDICES NO EST√ÅN FUNCIONANDO O NO SE CREARON');
    console.log('\n   Posibles causas:');
    console.log('   1. Los √≠ndices no se crearon (error en SQL Editor)');
    console.log('   2. PostgreSQL no los est√° usando (tabla muy peque√±a)');
    console.log('   3. Permisos insuficientes\n');
    
    console.log('   ‚úÖ Soluci√≥n 1: Verificar en Supabase SQL Editor');
    console.log('   Ejecuta esta query para ver los √≠ndices:\n');
    console.log("   SELECT indexname FROM pg_indexes WHERE tablename = 'programas';\n");
    
    console.log('   ‚úÖ Soluci√≥n 2: Recrear √≠ndices con DROP primero');
    console.log('   DROP INDEX IF EXISTS idx_programas_categoria_id;');
    console.log('   CREATE INDEX idx_programas_categoria_id ON programas(categoria_id);\n');
  }

  // Recomendaciones adicionales
  console.log('üí° RECOMENDACIONES ADICIONALES:\n');
  
  if (programasCount && programasCount < 500) {
    console.log('   ‚Ä¢ Con solo 200 programas, los √≠ndices ayudan pero no son cr√≠ticos');
    console.log('   ‚Ä¢ El problema real puede ser: latencia de red + sin cach√©\n');
  }

  console.log('   üöÄ Optimizaciones que S√ç funcionan:');
  console.log('   1. ISR (Incremental Static Regeneration) - YA IMPLEMENTADO ‚úÖ');
  console.log('   2. Cloudinary para im√°genes - YA IMPLEMENTADO ‚úÖ');
  console.log('   3. Deploy a Vercel (edge functions cerca del usuario)');
  console.log('   4. Implementar React Query para cach√© en cliente\n');

  console.log('='.repeat(70));
}

deepDiagnosis();
