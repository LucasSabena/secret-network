import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

async function comparePerformance() {
  console.log('\n' + '='.repeat(70));
  console.log('üî¨ COMPARACI√ìN DE PERFORMANCE - ANTES vs DESPU√âS');
  console.log('='.repeat(70) + '\n');

  // Test 1: Consulta simple
  console.log('üìä TEST 1: Consulta Simple de Programas');
  const start1 = Date.now();
  const { data: programas } = await supabase
    .from('programas')
    .select('*')
    .limit(100);
  const time1 = Date.now() - start1;
  console.log(`   ‚è±Ô∏è  Tiempo: ${time1}ms`);
  console.log(`   üìà ${time1 < 200 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è  MEJORABLE'}\n`);

  // Test 2: Consulta con JOIN (categor√≠as)
  console.log('üìä TEST 2: Programas con Categor√≠as (JOIN)');
  const start2 = Date.now();
  const programaIds = programas?.slice(0, 50).map(p => p.id) || [];
  const categoriaIds = programas?.slice(0, 50).map(p => p.categoria_id) || [];
  
  const { data: categorias } = await supabase
    .from('categorias')
    .select('*')
    .in('id', categoriaIds);
  const time2 = Date.now() - start2;
  console.log(`   ‚è±Ô∏è  Tiempo: ${time2}ms`);
  console.log(`   üìà ${time2 < 150 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è  MEJORABLE'}\n`);

  // Test 3: Consulta compleja con relaciones
  console.log('üìä TEST 3: Relaciones Programa-Subcategor√≠as');
  const start3 = Date.now();
  const { data: relaciones } = await supabase
    .from('programas_subcategorias')
    .select('*')
    .in('programa_id', programaIds);
  const time3 = Date.now() - start3;
  console.log(`   ‚è±Ô∏è  Tiempo: ${time3}ms`);
  console.log(`   üìà ${time3 < 100 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è  MEJORABLE'}\n`);

  // Test 4: B√∫squeda por slug (√≠ndice recomendado)
  console.log('üìä TEST 4: B√∫squeda por Slug');
  const start4 = Date.now();
  const { data: programa } = await supabase
    .from('programas')
    .select('*')
    .eq('slug', 'figma')
    .single();
  const time4 = Date.now() - start4;
  console.log(`   ‚è±Ô∏è  Tiempo: ${time4}ms`);
  console.log(`   üìà ${time4 < 50 ? '‚úÖ R√ÅPIDO' : '‚ö†Ô∏è  MEJORABLE'}\n`);

  // Resumen
  const totalTime = time1 + time2 + time3 + time4;
  console.log('='.repeat(70));
  console.log('üìà RESUMEN DE PERFORMANCE');
  console.log('='.repeat(70));
  console.log(`‚è±Ô∏è  Tiempo total: ${totalTime}ms\n`);

  console.log('üéØ OBJETIVOS (CON √çNDICES):');
  console.log(`   ‚Ä¢ Consulta simple: < 200ms       (actual: ${time1}ms) ${time1 < 200 ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ JOIN categor√≠as: < 150ms       (actual: ${time2}ms) ${time2 < 150 ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ Relaciones: < 100ms            (actual: ${time3}ms) ${time3 < 100 ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ B√∫squeda slug: < 50ms          (actual: ${time4}ms) ${time4 < 50 ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ Total: < 500ms                 (actual: ${totalTime}ms) ${totalTime < 500 ? '‚úÖ' : '‚ùå'}\n`);

  if (totalTime < 500 && time3 < 100) {
    console.log('üéâ ¬°EXCELENTE! Los √≠ndices est√°n funcionando correctamente.');
    console.log('   Tu base de datos est√° optimizada.\n');
  } else if (time3 > 200) {
    console.log('‚ö†Ô∏è  LOS √çNDICES NO EST√ÅN CREADOS O NO EST√ÅN FUNCIONANDO');
    console.log('   Por favor, ejecuta el SQL en Supabase:');
    console.log('   1. Abre: scripts/create-indexes.sql');
    console.log('   2. Copia el contenido');
    console.log('   3. P√©galo en Supabase SQL Editor');
    console.log('   4. Ejecuta\n');
  } else {
    console.log('üü° RENDIMIENTO MODERADO');
    console.log('   Los √≠ndices ayudar√°n, pero tambi√©n considera:');
    console.log('   ‚Ä¢ Verificar la ubicaci√≥n del servidor de Supabase');
    console.log('   ‚Ä¢ Revisar el plan de Supabase (free tier puede ser m√°s lento)');
    console.log('   ‚Ä¢ Implementar cach√© adicional en el servidor\n');
  }

  console.log('='.repeat(70));
}

comparePerformance();
